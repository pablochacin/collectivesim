package edu.upc.cnds.collectivesim.grid;

import edu.upc.cnds.collectiveg.GridResourceBroker;
import edu.upc.cnds.collectiveg.GridTask;
import edu.upc.cnds.collectivesim.model.base.ReflexionModelAgent;
import edu.upc.cnds.collectivesim.stream.Stream;

/**
 * 
 *  Provides a Stream with the arrival times of the tasks generated by a GridWorload and
 *  submits the corresponding GridTask(s) each time its run method is called.
 *  
 * @author Pablo Chacin
 *
 */
public class GridWorkloadAgent extends ReflexionModelAgent implements Runnable, Stream<Long>{
	
	private GridWorkload workload;
	
	private GridResourceBroker broker;
	
	private GridWorkLoadModel model;
	
	private GridTask nextArrival;
	
	public GridWorkloadAgent(GridWorkLoadModel model, GridResourceBroker broker,GridWorkload workload) {
		this.model = model;
		this.broker = broker;
		this.workload = workload;
		this.nextArrival = workload.getNextArrival();
	}
	
	public Stream<Long> arrivalTimeStream(){
		return this;
	}
	
	/**
	 * Submits all the tasks whose arrival time are below current model time.
	 * This allows submitting tasks in "batch" if the agent is not called 
	 * exactly at the arrival time of each task (for example, it is called
	 * each n ticks, when n is fixed)
	 */
	public void run(){
		while(nextArrival.getTimeSumitted() <= model.getCurrentTime()){
			broker.sumbit(workload.getNextArrival());
			nextArrival =  workload.getNextArrival();
		}
	}

	public String getName(){
		return workload.getName();
	}
	/**
	 * Returns the next arrival time for the workload.
	 */
	public Long getValue() {
		return nextArrival.getTimeSumitted();
	}

	@Override
	public void reset() {
		// Do nothing.
		
	}
	
	@Override
	public void open() {
		// Do nothing.
		
	}
	
}